<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>extMemoization</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  Memoization.swift
//  RxSwiftly
//
//  Created by Bas van Kuijck on 28/07/2017.
//

// This code is distributed under the terms and conditions of the MIT License:

// Copyright Â© 2017 E-sites. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import Foundation
import RxSwift
import RxCocoa

public protocol Memoization: class { }
extension NSObject: Memoization { }

extension Memoization {
    /// Memoizes the the `lazyCreateClosure`
    ///
    /// [Read this](https://nl.wikipedia.org/wiki/Memoization) for more information about memoization:
    ///
    /// - Notes: Memoization will be stored alongside the &amp;key and the `self`.
    ///
    /// - Parameters:
    ///   - key: The `UnsafeRawPointer` to store the memoized outcome in.
    ///   - lazyCreateClosure: The closure which creates the object
    /// - Returns: The object itself
    public func memoize&lt;T&gt;(key: UnsafeRawPointer, lazyCreateClosure: () -&gt; T) -&gt; T {
        return _memoize(self, key: key, lazyCreateClosure: lazyCreateClosure)
    }
}

extension Reactive {
    /// Memoizes the the `lazyCreateClosure`
    ///
    /// [Read this](https://nl.wikipedia.org/wiki/Memoization) for more information about memoization:
    ///
    /// - Notes: Memoization will be stored alongside the &amp;key and the `self.base` of the Reactive instance.
    ///
    /// - Parameters:
    ///   - key: The `UnsafeRawPointer` to store the memoized outcome in.
    ///   - lazyCreateClosure: The closure which creates the object
    /// - Returns: The object itself
    public func memoize&lt;T&gt;(key: UnsafeRawPointer, lazyCreateClosure: () -&gt; Observable&lt;T&gt;) -&gt; Observable&lt;T&gt; {
        return _memoize(self.base, key: key, lazyCreateClosure: lazyCreateClosure)
    }
}

fileprivate func _memoize&lt;T&gt;(_ object: Any, key: UnsafeRawPointer, lazyCreateClosure: () -&gt; T) -&gt; T {
    objc_sync_enter(object); defer { objc_sync_exit(object) }
    if let instance = objc_getAssociatedObject(object, key) as? T {
        return instance
    }

    let instance = lazyCreateClosure()
    objc_setAssociatedObject(object, key, instance, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
    return instance
}

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>82EFA268-67CC-46AF-8C7B-088462D1D4D7</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>Ext: Memoization</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
