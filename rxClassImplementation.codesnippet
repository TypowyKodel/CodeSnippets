<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>rxClassImplementation</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>TopLevel</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import RxSwift
import RxCocoa

// uncomment following line if your class does not conforms to ReactiveCompatible protocol
//extension &lt;#ClassName#&gt; : ReactiveCompatible {}

public class Rx&lt;#ClassName#&gt;: &lt;#ClassName#&gt; {
    
    fileprivate lazy var _&lt;#propertyName#&gt; = BehaviorSubject&lt;&lt;#type#&gt;&gt;(value: self.&lt;#propertyName#&gt;)
    &lt;#override#&gt; public var &lt;#propertyName#&gt;: &lt;#type#&gt; = &lt;#value#&gt; {
        didSet {
            _&lt;#propertyName#&gt;.onNext(&lt;#propertyName#&gt;)
        }
    }
}

extension Reactive where Base: Rx&lt;#ClassName#&gt; {
    
    public var &lt;#propertyName#&gt;: Observable&lt;&lt;#type#&gt;&gt; {
        return base._&lt;#propertyName#&gt;.asObservable()
    }
    
    public var set&lt;#PropertyName#&gt;: Binder&lt;&lt;#type#&gt;&gt; {
        return Binder&lt;&lt;#type#&gt;&gt;(base, binding: { target, value in
            target.&lt;#propertyName#&gt; = value
        })
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>44FC953D-369F-4891-96FF-692A436BEA62</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>Rx class override and Reactive extension implementation</string>
	<key>IDECodeSnippetTitle</key>
	<string>Rx: Reactive class override and extension</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
